/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface FyghtersInterface extends Interface {
  functions: {
    approve: TypedFunctionDescription<{
      encode([to, tokenId]: [string, BigNumberish]): string;
    }>;

    balanceOf: TypedFunctionDescription<{ encode([owner]: [string]): string }>;

    fyghters: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    getApproved: TypedFunctionDescription<{
      encode([tokenId]: [BigNumberish]): string;
    }>;

    isApprovedForAll: TypedFunctionDescription<{
      encode([owner, operator]: [string, string]): string;
    }>;

    ownerOf: TypedFunctionDescription<{
      encode([tokenId]: [BigNumberish]): string;
    }>;

    safeTransferFrom: TypedFunctionDescription<{
      encode([from, to, tokenId]: [string, string, BigNumberish]): string;
    }>;

    setApprovalForAll: TypedFunctionDescription<{
      encode([operator, approved]: [string, boolean]): string;
    }>;

    skins: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceId]: [Arrayish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([from, to, tokenId]: [string, string, BigNumberish]): string;
    }>;

    create: TypedFunctionDescription<{ encode([_name]: [string]): string }>;

    rename: TypedFunctionDescription<{
      encode([_fyghterId, _newName]: [BigNumberish, string]): string;
    }>;

    attack: TypedFunctionDescription<{
      encode([_attackerId, _targetId]: [BigNumberish, BigNumberish]): string;
    }>;

    changeSkin: TypedFunctionDescription<{
      encode([_fyghterId, _newSkin]: [BigNumberish, string]): string;
    }>;

    calculateAttackerProbability: TypedFunctionDescription<{
      encode([_attackerId, _targetId]: [BigNumberish, BigNumberish]): string;
    }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([owner, approved, tokenId]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    ApprovalForAll: TypedEventDescription<{
      encodeTopics([owner, operator, approved]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Attack: TypedEventDescription<{
      encodeTopics([attackerId, targetId, winnerId]: [
        null,
        null,
        null
      ]): string[];
    }>;

    FyghterRenamed: TypedEventDescription<{
      encodeTopics([id, newName]: [null, null]): string[];
    }>;

    NewFyghter: TypedEventDescription<{
      encodeTopics([owner, id, name]: [null, null, null]): string[];
    }>;

    SkinChanged: TypedEventDescription<{
      encodeTopics([id, newSkin]: [null, null]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, tokenId]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;
  };
}

export class Fyghters extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Fyghters;
  attach(addressOrName: string): Fyghters;
  deployed(): Promise<Fyghters>;

  on(event: EventFilter | string, listener: Listener): Fyghters;
  once(event: EventFilter | string, listener: Listener): Fyghters;
  addListener(eventName: EventFilter | string, listener: Listener): Fyghters;
  removeAllListeners(eventName: EventFilter | string): Fyghters;
  removeListener(eventName: any, listener: Listener): Fyghters;

  interface: FyghtersInterface;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    balanceOf(owner: string): Promise<BigNumber>;

    fyghters(
      arg0: BigNumberish
    ): Promise<{
      id: BigNumber;
      name: string;
      skin: string;
      xp: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
    }>;

    getApproved(tokenId: BigNumberish): Promise<string>;

    isApprovedForAll(owner: string, operator: string): Promise<boolean>;

    ownerOf(tokenId: BigNumberish): Promise<string>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    skins(
      arg0: BigNumberish
    ): Promise<{
      skin: string;
      xpNeeded: number;
      0: string;
      1: number;
    }>;

    supportsInterface(interfaceId: Arrayish): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    create(
      _name: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    rename(
      _fyghterId: BigNumberish,
      _newName: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    attack(
      _attackerId: BigNumberish,
      _targetId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    changeSkin(
      _fyghterId: BigNumberish,
      _newSkin: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    calculateAttackerProbability(
      _attackerId: BigNumberish,
      _targetId: BigNumberish
    ): Promise<BigNumber>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string): Promise<BigNumber>;

  fyghters(
    arg0: BigNumberish
  ): Promise<{
    id: BigNumber;
    name: string;
    skin: string;
    xp: BigNumber;
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
  }>;

  getApproved(tokenId: BigNumberish): Promise<string>;

  isApprovedForAll(owner: string, operator: string): Promise<boolean>;

  ownerOf(tokenId: BigNumberish): Promise<string>;

  safeTransferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  skins(
    arg0: BigNumberish
  ): Promise<{
    skin: string;
    xpNeeded: number;
    0: string;
    1: number;
  }>;

  supportsInterface(interfaceId: Arrayish): Promise<boolean>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  create(
    _name: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  rename(
    _fyghterId: BigNumberish,
    _newName: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  attack(
    _attackerId: BigNumberish,
    _targetId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  changeSkin(
    _fyghterId: BigNumberish,
    _newSkin: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  calculateAttackerProbability(
    _attackerId: BigNumberish,
    _targetId: BigNumberish
  ): Promise<BigNumber>;

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    Attack(attackerId: null, targetId: null, winnerId: null): EventFilter;

    FyghterRenamed(id: null, newName: null): EventFilter;

    NewFyghter(owner: null, id: null, name: null): EventFilter;

    SkinChanged(id: null, newSkin: null): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;
  };

  estimate: {
    approve(to: string, tokenId: BigNumberish): Promise<BigNumber>;

    balanceOf(owner: string): Promise<BigNumber>;

    fyghters(arg0: BigNumberish): Promise<BigNumber>;

    getApproved(tokenId: BigNumberish): Promise<BigNumber>;

    isApprovedForAll(owner: string, operator: string): Promise<BigNumber>;

    ownerOf(tokenId: BigNumberish): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish
    ): Promise<BigNumber>;

    setApprovalForAll(operator: string, approved: boolean): Promise<BigNumber>;

    skins(arg0: BigNumberish): Promise<BigNumber>;

    supportsInterface(interfaceId: Arrayish): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish
    ): Promise<BigNumber>;

    create(_name: string): Promise<BigNumber>;

    rename(_fyghterId: BigNumberish, _newName: string): Promise<BigNumber>;

    attack(
      _attackerId: BigNumberish,
      _targetId: BigNumberish
    ): Promise<BigNumber>;

    changeSkin(_fyghterId: BigNumberish, _newSkin: string): Promise<BigNumber>;

    calculateAttackerProbability(
      _attackerId: BigNumberish,
      _targetId: BigNumberish
    ): Promise<BigNumber>;
  };
}
